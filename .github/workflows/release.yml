name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ github.ref_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: DHD ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            # DHD ${{ github.ref_name }}

            ## Installation

            ### Linux/macOS/BSD
            ```bash
            # Download for your platform
            curl -LO https://github.com/korora-tech/dhd/releases/download/${{ github.ref_name }}/dhd-${{ github.ref_name }}-{platform}-{arch}.tar.gz
            tar -xzf dhd-${{ github.ref_name }}-{platform}-{arch}.tar.gz
            sudo mv dhd /usr/local/bin/
            ```

            ### Windows
            Download the appropriate `.zip` file and add to your PATH.

            ## Checksums
            See `checksums.txt` in the release assets.

  build-release:
    name: Build - ${{ matrix.name }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            name: linux-x86_64
            target: x86_64-unknown-linux-musl
            use_cross: true
          - os: ubuntu-latest
            name: linux-aarch64
            target: aarch64-unknown-linux-musl
            use_cross: true
          
          # macOS builds
          - os: macos-latest
            name: darwin-x86_64
            target: x86_64-apple-darwin
            use_cross: false
          - os: macos-latest
            name: darwin-aarch64
            target: aarch64-apple-darwin
            use_cross: false
          
          # Windows builds
          - os: windows-latest
            name: windows-x86_64
            target: x86_64-pc-windows-msvc
            use_cross: false
          - os: ubuntu-latest
            name: windows-aarch64
            target: aarch64-pc-windows-gnu
            use_cross: true
          
          # BSD builds
          - os: ubuntu-latest
            name: freebsd-x86_64
            target: x86_64-unknown-freebsd
            use_cross: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build (cross)
        if: matrix.use_cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Build (cargo)
        if: '!matrix.use_cross'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz dhd
          mv dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz ../../../

      - name: Package (Windows)
        if: runner.os == 'Windows' || contains(matrix.target, 'windows')
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          7z a -tzip dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip dhd.exe
          mv dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip ../../../

      - name: Upload Release Asset (tar.gz)
        if: runner.os != 'Windows' && !contains(matrix.target, 'windows')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz
          asset_name: dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (zip)
        if: runner.os == 'Windows' || contains(matrix.target, 'windows')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip
          asset_name: dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip
          asset_content_type: application/zip

      - name: Generate checksum
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]] || [[ "${{ matrix.target }}" == *"windows"* ]]; then
            sha256sum dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip > dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip.sha256
          else
            sha256sum dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz > dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256
          fi

      - name: Upload checksum (tar.gz)
        if: runner.os != 'Windows' && !contains(matrix.target, 'windows')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256
          asset_name: dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256
          asset_content_type: text/plain

      - name: Upload checksum (zip)
        if: runner.os == 'Windows' || contains(matrix.target, 'windows')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip.sha256
          asset_name: dhd-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip.sha256
          asset_content_type: text/plain

  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish dhd-macros
        run: |
          cd dhd-macros
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true

      - name: Wait for dhd-macros
        run: sleep 30

      - name: Publish dhd
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        continue-on-error: true